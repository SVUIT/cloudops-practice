name: Deploy resource on Dev enviroment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  
permissions: 
  contents: read
  pull-requests: write

env:
  TF_TOKEN_app_terraform_io: ${{ secrets.HCP_API }}

jobs:
  filter: 
    runs-on: ubuntu-latest
    outputs:
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            infra:
              - 'infra/**'
    concurrency: 
      group: terraform-apply
      cancel-in-progress: false

  terraform:
    name: Terraform plan & apply in Dev Workspace
    needs: filter
    if: needs.filter.outputs.infra == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: 1.4.0
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Create Workspace on Terraform Cloud
        run: |
          WORKSPACE_NAME="cloudops-practice-dev${{ github.event.pull_request.number }}"
          ORG_NAME="andrewdq"
          echo "Checking if workspace $WORKSPACE_NAME exists..."
          EXISTS=$(curl -s \
            --header "Authorization: Bearer $TF_TOKEN_app_terraform_io" \
            "https://app.terraform.io/api/v2/organizations/$ORG_NAME/workspaces/$WORKSPACE_NAME" \
            | jq -r '.data.id // empty')

          if [ -z "$EXISTS" ]; then
            echo "Creating workspace $WORKSPACE_NAME..."
            curl -s \
              --header "Authorization: Bearer $TF_TOKEN_app_terraform_io" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data "{
                \"data\": {
                  \"attributes\": {
                    \"name\": \"$WORKSPACE_NAME\",
                    \"execution-mode\": \"local\"
                  },
                  \"type\": \"workspaces\"
                }
              }" \
              "https://app.terraform.io/api/v2/organizations/$ORG_NAME/workspaces" > /dev/null
            echo "Workspace $WORKSPACE_NAME created successfully."
          else
            echo "Workspace $WORKSPACE_NAME already exists."
          fi

      - name: Terraform Init & Workspace
        working-directory: infra/terraform
        run: |
          terraform init
          WORKSPACE_NAME="cloudops-practice-dev${{ github.event.pull_request.number }}"
          echo "Selecting workspace $WORKSPACE_NAME..."
          terraform workspace select $WORKSPACE_NAME

      - name: Terraform Validate
        id: validate
        working-directory: infra/terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: infra/terraform
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -var="resource_prefix=dev${{ github.event.pull_request.number }}" -no-color > tfplan.txt
          echo "PLAN_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: Comment Plan 
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infra/terraform/tfplan.txt', 'utf8');
            const exitCode = process.env.PLAN_EXIT_CODE;
            const output = `#### Terraform Plan ðŸ“–
            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${plan}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            const issue_number = context.issue.number;
            const repo = context.repo;

            const comments = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            );

            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: botComment.id,
              });
            }

            await github.rest.issues.createComment({
              issue_number,
              owner: repo.owner,
              repo: repo.repo,
              body: output
            });

            if (exitCode == "1") {
              core.setFailed("Terraform plan failed.");
            }

      - name: Terraform Apply on the Dev env
        if: env.PLAN_EXIT_CODE == '0'
        working-directory: infra/terraform
        run: |
          terraform apply -auto-approve -var="resource_prefix=dev${{ github.event.pull_request.number }}"